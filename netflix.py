# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ft3hBvP8CCn06kGM4TDjTfPCnEhMDs6M
"""

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import missingno as msno
import plotly.express as px
import plotly.graph_objects as go
from matplotlib import font_manager, rc


import warnings
warnings.filterwarnings("ignore")

plt.rc('font', family='NanumBarunGothic') 

#data import
main_df=pd.read_csv("/content/netflix_titles.csv")
print(main_df.info())

#결측치 데이터 표로 확인
msno.bar(main_df)

#결측치 데이터 숫자로 확인
main_df.isna().sum()

#데이터 처리에 필요가 없는 director와 cast, duration을 drop한다.
main_df = main_df.drop(['director', 'cast'], axis=1)
main_df.columns

#duration 칼럼또한 drop해 데이터를 처리한다.
main_df = main_df.drop(['duration'], axis=1)

#date_added 칼럼의 빈 데이터는 삭제해서 처리한다.
main_df=main_df[main_df["date_added"].notna()]
main_df.isna().sum()

#country칼럼의 결측치를 가장 많이 있는 값으로 채운다

main_df['country'] = main_df['country'].fillna(main_df['country'].mode()[0])
main_df.isna().sum()

#rating의 결측치를 채워넣는 과정을 진행하기전 rating이 Nan인 데이터의 id값을 확인한다.
main_df[main_df.rating.isnull()]

main_df['rating'] = main_df['rating'].fillna("PG-13")
main_df.isna().sum()

# year 컬럼 추가 
main_df['year'] = main_df['date_added'].apply(lambda x: x.split(" ")[-1])

# month 컬럼 추가 
main_df['month'] = main_df['date_added'].apply(lambda x: x.split(" ")[0])

# 데이터 확인
main_df.head()

#관람등급에 관련된 칼럼을 target칼럼으로 설정해 추가한다.
ratings = {
    'TV-PG': 'Older Kids',
    'TV-MA': 'Adults',
    'TV-Y7-FV': 'Older Kids',
    'TV-Y7': 'Older Kids',
    'TV-14': 'Teens',
    'R': 'Adults',
    'TV-Y': 'Kids',
    'NR': 'Adults',
    'PG-13': 'Teens',
    'TV-G': 'Kids',
    'PG': 'Older Kids',
    'G': 'Kids',
    'UR': 'Adults',
    'NC-17': 'Adults'
}

main_df['target'] = main_df['rating'].replace(ratings)
main_df['target'].unique()

#필요한 데이터 타입들을 변경해준다.

# type -> category
main_df['type'] = pd.Categorical(main_df['type'])

# target -> category
main_df['target'] = pd.Categorical(main_df['target'], categories=['Kids', 'Older Kids', 'Teens', 'Adults'])

# year -> integer
main_df['year'] = pd.to_numeric(main_df['year'])

main_df.dtypes

#전처리 과정을 마친 데이터 정보
print(main_df.info())

#데이터 시각화할때 직관적으로 이해 가능 하도록 한다.
df_tv = main_df[main_df["type"] == "TV Show"]
df_movies = main_df[main_df["type"] == "Movie"]

plt.figure(figsize=(15, 7))
labels=['티비 쇼', '영화']
plt.pie(main_df['type'].value_counts().sort_values(),labels=labels,explode=[0.1,0.1],
        autopct='%.1f%%',colors=['silver','gold'],shadow=True, startangle=90)
plt.title('넷플릭스 컨텐츠 종류')
plt.axis('equal')
plt.show()

from collections import Counter
country_data = main_df['country']
country_count = pd.Series(dict(Counter(','.join(country_data).replace(' ,',',').replace(
    ', ',',').split(',')))).sort_values(ascending=False)
top10 = country_count.head(10)

plt.figure(figsize=(10,5))
sns.barplot(x= top10, y=top10.index, orient='h')
plt.xticks(rotation=50)
plt.title('국가별 컨텐츠 소비량 상위 10개국', fontsize=15, fontweight='bold')
plt.show()

plt.figure(figsize=(20,5))
sns.barplot(x = df_movies["listed_in"].value_counts().head(10).index,
            y = df_movies["listed_in"].value_counts().head(10).values)
plt.xticks(rotation=80)
plt.title('영화장르 탑 10')
plt.show()

plt.figure(figsize=(20,5))
sns.barplot(x = df_tv["listed_in"].value_counts().head(10).index,
            y = df_tv["listed_in"].value_counts().head(10).values)
plt.xticks(rotation=80)
plt.title("티비쇼 장르 탑10")
plt.show()

from wordcloud import WordCloud
from PIL import Image
text = ' '.join(df_movies['title'])
im = Image.open('heart.jpg') # 이미지 파일 읽어오기
mask_arr = np.array(im) # 픽셀 값 배열 형태 변환
plt.rcParams['figure.figsize'] = (15,15)
wordcloud = WordCloud(background_color = 'white', width = 1200,  height = 1200, max_words = 20,mask = mask_arr,
                      prefer_horizontal = True).generate(text)
plt.imshow(wordcloud)
plt.axis('off')
plt.show()

from wordcloud import WordCloud
from PIL import Image
text = ' '.join(df_tv['title'])
im = Image.open('heart.jpg') # 이미지 파일 읽어오기
mask_arr = np.array(im) # 픽셀 값 배열 형태 변환
plt.rcParams['figure.figsize'] = (15,15)
wordcloud = WordCloud(background_color = 'white', width = 1200,  height = 1200, max_words = 20,mask = mask_arr,
                      prefer_horizontal = True).generate(text)
plt.imshow(wordcloud)
plt.axis('off')
plt.show()